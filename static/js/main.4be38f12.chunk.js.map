{"version":3,"sources":["ModalConfirm.js","App.js","ModalComponent.js","reportWebVitals.js","index.js"],"names":["theme","unstable_createMuiStrictModeTheme","ModalConfirm","modalOpen","modalType","modalTitle","modalContentText","addModalChildren","modalBottomType","bottomFirstButtonName","onBottomFirstButtonClick","bottomSecondButtonName","onBottomSecondButtonClick","autoClose","bottomThirdButtonName","onBottomThirdButtonClick","useState","ThemeProvider","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","modalBtm_oneBtn","onClick","modalBtm_twoBtn","App","Component","props","onAutoClose","setState","onFirstButtonClick","console","log","onModalOpen","changeModal","state","modalProps","onDropFile","file","e","reader","FileReader","scope","onload","src","result","alert","readAsDataURL","alertBtnTest","twoBtnTest","change","buttonOnClick","changeTest","loginTest","loginForm","type","onChange","target","value","this","style","border","width","color","padding","height","FileDrop","onDrop","files","event","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4be38f12.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { unstable_createMuiStrictModeTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = unstable_createMuiStrictModeTheme();\r\n\r\nconst ModalConfirm\r\n    = ({ modalOpen = false,\r\n           modalType,\r\n           modalTitle = '',\r\n           modalContentText = '',\r\n           addModalChildren,\r\n           modalBottomType = '',\r\n           bottomFirstButtonName = '',\r\n           onBottomFirstButtonClick = null,\r\n           bottomSecondButtonName = '',\r\n           onBottomSecondButtonClick = null,\r\n           bottomThirdButtonName = '',\r\n           onBottomThirdButtonClick = null,\r\n           autoClose\r\n    }) => {\r\n\r\n    const [open, setOpen] = useState(modalOpen);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme = {theme}>\r\n            <Dialog\r\n                open={modalOpen}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{modalTitle}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {modalContentText}\r\n                        {addModalChildren}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {\r\n                        {\r\n                            /*alert_oneBtn:<button onClick={onBottomFirstButtonClick}>{bottomFirstButtonName}</button>,*/\r\n                            modalBtm_oneBtn : <button onClick={function (){onBottomFirstButtonClick(); autoClose();}}>{bottomFirstButtonName}</button>,\r\n                            modalBtm_twoBtn:<div><button onClick={onBottomFirstButtonClick}>{bottomFirstButtonName}</button><button onClick={onBottomSecondButtonClick}>{bottomSecondButtonName}</button></div>,\r\n                        }[modalBottomType]\r\n\r\n                    }\r\n                </DialogActions>\r\n            </Dialog>\r\n        </ThemeProvider>\r\n\r\n    );\r\n}\r\nexport default ModalConfirm;\r\n","import React, {Component, useState} from 'react';\nimport ModalConfirm from \"./ModalConfirm\"; // opensource(material-ui)\nimport { FileDrop } from 'react-file-drop';\nimport ModalComponent from \"./ModalComponent\"; // opensource 활용하여 별도로 만든거\nimport ReactDOM from 'react-dom';\n\n//https://darrengwon.tistory.com/560\n\nexport default class App extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            modalOpen : false,\n            modalProps : {\n                modalType : \"alert_twoBtn\",\n                modalTitle : \"alert_oneBtn\",\n                modalContentText : \"타이틀\",\n                addModalChildren : null,\n                modalBottomType : \"one Button Modal\",\n                bottomFirstButtonName : \"OK\",\n                onBottomFirstButtonClick : (this.onFirstButtonClick),\n                autoClose : (this.onAutoClose)\n            }\n        }\n\n    }\n\n    //modal 창 바깥쪽 클릭시 modal 닫기\n    //에러 있어서 주석 처리\n/*\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside, true);\n    }\n\n    componentWillUnmount() {\n        document.addEventListener('mousedown', this.handleClickOutside, true);\n    }\n\n    handleClickOutside = event => {\n        const domNode = ReactDOM.findDOMNode(this);\n        if(event.target.className === 'openModal modal'){\n            console.log(\"false\");\n            this.setState({modalOpen : false});\n        }\n\n    }*/\n\n    onAutoClose = () => {\n        this.setState({modalOpen : false});\n    }\n\n    onFirstButtonClick = () => {\n        this.setState({modalOpen : false});\n        console.log(\"onFirstButtonClick\");\n    }\n\n    onModalOpen = (\n        modalType,\n        modalTitle = \"\",\n        modalContentText = \"\",\n        addModalChildren = null,\n        modalBottomType = \"modalBtm_oneBtn\",\n        bottomFirstButtonName = \"\",\n        onBottomFirstButtonClick = null,\n        bottomSecondButtonName = \"\",\n        onBottomSecondButtonClick = null,\n        bottomThirdButtonName = \"\",\n        onBottomThirdButtonClick = null\n    ) => {\n        let changeModal = this.state.modalProps;\n        changeModal.modalType = modalType;\n        changeModal.modalTitle = modalTitle;\n        changeModal.modalContentText = modalContentText;\n        changeModal.addModalChildren = addModalChildren;\n        changeModal.modalBottomType = modalBottomType;\n        changeModal.bottomFirstButtonName = bottomFirstButtonName;\n        changeModal.onBottomFirstButtonClick = onBottomFirstButtonClick;\n        changeModal.bottomSecondButtonName = bottomSecondButtonName;\n        changeModal.onBottomSecondButtonClick = onBottomSecondButtonClick;\n        changeModal.bottomThirdButtonName = bottomThirdButtonName;\n        changeModal.onBottomThirdButtonClick = onBottomThirdButtonClick;\n\n        this.setState({modalProps : changeModal});\n\n        this.setState({modalOpen:true});\n    }\n\n    onDropFile = (file, e) => {\n        let reader = new FileReader();\n        const scope = this;\n        let modal = this.state.modalProps;\n\n        reader.onload = function () {\n            scope.onModalOpen(\n                \"\",\n                \"drag & drop test\",\n                \"1. drop file.\\r\\n2.modal open.(with file)\",\n                (<img src={reader.result}/>),\n                \"modalBtm_oneBtn\",\n                \"OK\",\n                function (){\n                    alert(\"OK\");\n                },\n            );\n        }\n\n        reader.readAsDataURL(file[0]);\n    }\n\n    render() {\n        const buttonAlert = () => {\n            alert(\"?????\");\n        }\n        /*\n                let modalProps = {\n                    modalType : \"alert_twoBtn\",\n                    title : \"타이틀\",\n                    contentText : \"one Button Modal\",\n                    children : (<button onClick={buttonAlert}>aaaa</button>),\n                    onFirstButtonClick : (this.onFirstButtonClick)\n                };*/\n\n        const handleClickOpen = () => {\n\n            this.setState({modalOpen : true});\n        };\n\n\n        const onSecondButtonClick = () => {\n            console.log(\"onFirstButtonClick\");\n        }\n\n\n\n        return (\n            <div>\n                <ModalConfirm\n                    modalOpen={this.state.modalOpen}\n                    {...this.state.modalProps}\n                />\n\n                <div style={{border: '1px solid black', width: 600, color: 'black', padding: 20, height:600}}>\n                    <FileDrop\n                        /*                        onFrameDragEnter={(event) => this.onDropFile(event)}\n                                                onFrameDragLeave={(event) => console.log('onFrameDragLeave', event)}\n                                                onFrameDrop={(event) => console.log('onFrameDrop', event)}\n                                                onDragOver={(event) => console.log('onDragOver', event)}\n                                                onDragLeave={(event) => console.log('onDragLeave', event)}*/\n                        onDrop={(files, event) => this.onDropFile( files, event)}\n                    >\n                        Drop some files here!\n                    </FileDrop>\n                </div>\n\n                <br/>\n                <br/>\n                <button onClick={this.alertBtnTest}>\n                    Open alert dialog\n                </button>\n                <br/>\n                <br/>\n                <button onClick={this.twoBtnTest}>another button</button>\n                <br/>\n                <br/>\n                <button onClick={this.loginTest}>login test</button>\n\n\n            </div>\n        );\n\n\n\n\n\n    };\n\n    alertBtnTest = () => {\n        const change = this;\n        this.onModalOpen(\n            \"\",\n            \"alert test\",\n            \"this is alert test.\",\n            null,\n            \"modalBtm_oneBtn\",\n            \"confirm\",\n            function (){\n                alert(\"confirm\");\n                //change.setState({modalOpen:false});\n            },\n        );\n\n\n    }\n\n    twoBtnTest = () => {\n        const change = this;\n        this.onModalOpen(\n            \"\",\n            \"two button test\",\n            \"this is two button test.\",\n            null,\n            \"modalBtm_twoBtn\",\n            \"OK\",\n            function (){\n                alert(\"OK\");\n                change.setState({modalOpen:false});\n            },\n            \"Cancel\",\n            function (){\n                alert(\"Cancel\");\n                change.setState({modalOpen:false});\n            },\n        );\n\n\n\n    }\n\n    buttonOnClick = (changeTest) =>{\n        alert(\"buttonOnClick\");\n        alert(changeTest);\n    }\n\n    loginTest = () => {\n\n        const change = this;\n        let changeTest = '';\n\n        const loginForm = (\n            <div>\n                <input type={\"text\"} onChange={function(e){\n                    changeTest = e.target.value;\n                }}/>\n                <button onClick={() => this.buttonOnClick(changeTest)}>check</button>\n            </div>\n        );\n\n        this.onModalOpen(\n            \"\",\n            \"login form test\",\n            \"\",\n            loginForm,\n            \"modalBtm_twoBtn\",\n            \"OK\",\n            function (){\n                alert(\"OK\");\n                change.setState({modalOpen:false});\n            },\n            \"Cancel\",\n            function (){\n                alert(\"Cancel\");\n                change.setState({modalOpen:false});\n            },\n        );\n\n\n    }\n\n}\n","import React, {Component} from \"react\";\r\nimport './ModalComponent.css';\r\n\r\nclass ModalComponent extends Component{\r\n\r\n    render() {\r\n        const { modalOpen,\r\n                close,\r\n                modalTitle,\r\n                modalContentText,\r\n            addModalChildren,\r\n                modalBottomType,\r\n                bottomFirstButtonName ,\r\n                onBottomFirstButtonClick,\r\n                bottomSecondButtonName,\r\n                onBottomSecondButtonClick,\r\n                bottomThirdButtonName,\r\n                onBottomThirdButtonClick,\r\n                autoClose\r\n                 } = this.props;\r\n\r\n        return(\r\n            <div className={ modalOpen ? 'openModal modal': 'modal' }>\r\n                { modalOpen ? (\r\n                    <section>\r\n                        <header>\r\n                            { modalTitle }\r\n                            <button className=\"close\" onClick={autoClose}> &times; </button>\r\n                        </header>\r\n                        <main>\r\n                            {modalContentText? <div>{modalContentText}</div> : ''}\r\n                            {this.props.children}\r\n                            {addModalChildren}\r\n                        </main>\r\n                        <footer>\r\n                            {\r\n                                {\r\n                                    /*alert_oneBtn:<button onClick={onBottomFirstButtonClick}>{bottomFirstButtonName}</button>,*/\r\n                                    modalBtm_oneBtn : <button onClick={function (){ onBottomFirstButtonClick(); autoClose();}}>{bottomFirstButtonName}</button>,\r\n                                    modalBtm_twoBtn:<div><button onClick={function (){ onBottomFirstButtonClick(); autoClose();}}>{bottomFirstButtonName}</button><button onClick={function (){ onBottomSecondButtonClick(); autoClose();}}>{bottomSecondButtonName}</button></div>,\r\n                                }[modalBottomType]\r\n\r\n                            }\r\n                        </footer>\r\n                    </section>\r\n                ) : null }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default ModalComponent;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}